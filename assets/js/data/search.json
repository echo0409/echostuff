[ { "title": "Zotero+iCloud多端文献同步管理及阅读", "url": "/echostuff/posts/Zotero+iCloud+Marginnote%E5%A4%9A%E7%AB%AF%E6%96%87%E7%8C%AE%E5%90%8C%E6%AD%A5%E7%AE%A1%E7%90%86%E5%8F%8A%E9%98%85%E8%AF%BB/", "categories": "学习总结, 应用技能", "tags": "tips", "date": "2020-10-13 15:18:57 +0800", "snippet": "趁教育优惠送耳机一波终于配齐全家桶，而且渐渐文献越来越多，合理管理文献迫在眉睫。终于找到了目前最优的解决方案，Zotero+iCloud。ZoteroZotero是一个免费、易用的个人研究助手，可以帮助你收集、组织、引用和分享文献。与此同时，Zotero是一个开源软件，很多人为Zotero开发了各种各样的插件，使得Zotero功能丰富，探索潜力无穷。此处不再介绍具体的使用方法。Zotfile美中不足的是，Zotero在存储文献时，会以数字+字母的乱码形式给文件命名，我们在其他没有Zotero软件的平台（如：iPad），难以查阅文献，因此我们需要插件的帮助：https://github.c..." }, { "title": "优秀博文记录", "url": "/echostuff/posts/%E4%BC%98%E7%A7%80%E5%8D%9A%E6%96%87%E8%AE%B0%E5%BD%95/", "categories": "学习总结, ML", "tags": "机器学习", "date": "2020-10-08 15:18:57 +0800", "snippet": "pdf备份在github私人repo中。 卷积网络BP算法推导：https://www.jefkine.com/general/2016/09/05/backpropagation-in-convolutional-neural-networks/ 梯度消失与梯度下降 https://www.jefkine.com/general/2018/05/21/2018-05-21-vanishing-and-exploding-gradient-problems/ 深入探讨：为什么要做特征归一化/标准化？https://mp.weixin.qq.com/s/gQKns0AILhtXZD..." }, { "title": "远程服务器Tensorboard使用总结", "url": "/echostuff/posts/Tensorboard%E4%BD%BF%E7%94%A8/", "categories": "学习总结, 应用技能", "tags": "tips", "date": "2020-10-07 15:18:57 +0800", "snippet": "ssh登录ssh -L 16006:127.0.0.1:6006 server_name@server.addresstensorboard默认端口为1006，在登录时将服务器的6006端口映射到本地的1006端口。在代码中加入tensorboardfrom torch.utils.tensorboard import SummaryWriter def main(): count=0 for weight in [0.1,1,5,10]: count=1 writer = SummaryWriter(&#39;log/para&#39;+str(..." }, { "title": "Linux下Clash配置小结", "url": "/echostuff/posts/Linux%E4%B8%8BClash%E9%85%8D%E7%BD%AE%E5%B0%8F%E7%BB%93/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2020-09-26 15:19:44 +0800", "snippet": "Linu下Clash的配置文件编写相当不友好，但是学院服务器boot已满，apt乱七八糟也难以修复，没法下载ss，只好用clash配置代理。配置文件的编写对缩进要求很高。配置文件放在github私密仓库里。Proxychains的配置用有root权限的账户操作，把最后一行填clash对应的socks5端口或https端口即可。sudo vim /etc/proxychains.conf[ProxyList]# add proxy here ...# meanwile# defaults set to &quot;tor&quot;socks5 127.0.0.1 8889" }, { "title": "共享集群使用总结", "url": "/echostuff/posts/%E5%85%B1%E4%BA%AB%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2020-09-26 15:18:57 +0800", "snippet": "最近刚开始用学校的共享集群，踩了不少坑，因此做个总结以供参考～简要介绍一个计算集群是由一组计算性能强劲的计算机通过高速网络连接后组成。集群中某单台计算机被称为节点（node）。高性能计算集群一般由登录节点、计算节点和存储节点组成。用户需要先连接到登录节点，登录节点是连接整个集群的入口。用户通过登录节点来进一步访问计算节点和存储节点。计算节点，是提供计算服务的计算机节点，可以是CPU节点或GPU节点。通常情况下，一个用户作业任务需要一台或多台计算节点来支持其计算服务。将某个计算作业任务分配到不同计算节点上进行计算的工具被称为作业调度系统。计算作业一般需要读写文件，我们采用了共享存储系统，将..." }, { "title": "MAC OS的openmpi配置", "url": "/echostuff/posts/openmpi%E9%85%8D%E7%BD%AE/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2020-05-12 15:44:20 +0800", "snippet": "官网下载https://www.open-mpi.org/software/ompi/v4.0/解压解压文件openmpi-4.0.tar.gz在openmpi文件夹目录下打开终端## 安装在/usr/local下./configure --prefix=/usr/local## 编译mpi下的库和文件，需要较长时间make all## 安装MPI，需要较长时间sudo make install## 检查path是否存在echo $PATH## 如果路径中没有/usr/local/bin，则需要自己加进去 ## 用root权限执行vi /etc/profile## 在文件末尾添上以下两行..." }, { "title": "VS Code + Cmake + Mac OS", "url": "/echostuff/posts/VS-Code-Cmake-Mac-OS/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2020-04-27 19:11:45 +0800", "snippet": "学校邮箱被ban，jetbrain家的软件都无法使用。Mac也不能用宇宙第一IDE，无奈写C/C++项目只能白手起家。总工程概览Project:│ ├── bin 可执行文件夹 │ └── test 测试文件夹├── build cmake缓存目录 ├── include 头文件目录│ └── utils.h├── make bash脚本├── readme.md 本文├── src ..." }, { "title": "Mac Catalina + Anaconda", "url": "/echostuff/posts/Mac-Catalina-Anaconda/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2020-03-11 15:00:27 +0800", "snippet": "常用命令# 查看conda版本$ conda --version# 更新conda版本$ conda update conda## 查看都安装了那些依赖库$ conda list# 创建新的python环境并且还指定python版本$ conda create -n myenv python=3.7# 创建新环境并指定包含的库$ conda create -n myenv scipy# 并且还可以指定库的版本$ conda create -n myenv scipy=0.15.0# 复制环境$ conda create --name myclone --clone myenv# 查看所有..." }, { "title": "Pandas日期数据处理", "url": "/echostuff/posts/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/", "categories": "学习总结, 基础知识", "tags": "Python", "date": "2020-03-10 17:21:04 +0800", "snippet": "读取并整理数据df[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;]) #将数据类型转换为日期类型df = df.set_index(&#39;date&#39;) # 将date设置为index按日期筛选数据按年度获取数据print(&#39;---------获取2013年的数据-----------&#39;)print(df[&#39;2013&#39;].head(2)) # 获取2013年的数据print(df[&#39;2013&#39;].tail(2)) # 获取2013年的数据print(&#39;--------..." }, { "title": "LaTex论文格式排版", "url": "/echostuff/posts/%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%8E%92%E7%89%88/", "categories": "学习总结, 应用技能", "tags": "tips", "date": "2019-10-09 20:54:12 +0800", "snippet": "基本符号中文排版不论中英文, 科技文章通常均使用英文半角标点. 中文文章的行内公式和两边正文之间要有空格. 例如:通过计算协方差矩阵 \\$\\Sigma$ 我们可以显示为：通过计算协方差矩阵 $\\Sigma$ 我们可以句点LaTeX中对句点”.”有一个特殊的规定: 当句点跟在非大写字母后时, LaTeX认为这个句点结束了这句话. 而在LaTeX中, 一句话和一句话之间的空格要略大于词和词之间的空格. 当你的句子确实是以大写字母结束时, 需要用\\@, 例如:Carrots contain Vitamin A\\@. Have you seen a rabbit wearing glasses?..." }, { "title": "使用Python操作PostgreSQL数据库", "url": "/echostuff/posts/%E4%BD%BF%E7%94%A8Python%E6%93%8D%E4%BD%9CPostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/", "categories": "学习总结, 基础知识", "tags": "Python", "date": "2019-09-01 20:03:32 +0800", "snippet": "使用Python操作PostgreSQL数据库。***建表时增加筛选条件SELECT p.gsn, case when p.enddate &amp;gt; fs.akitime - interval&#39;1&#39; day then ROUND(extract(epoch from (fs.akitime - interval&#39;1&#39; day-p.startdate)): : integer / 60 / 60 / 24)+1 else ROUND(extract(epoch from (p.enddate-p.startdate))::integer / 6..." }, { "title": "进行数据处理优化运行速度的tips", "url": "/echostuff/posts/pandas%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/", "categories": "学习总结, 基础知识", "tags": "Python", "date": "2019-09-01 20:03:32 +0800", "snippet": "本人进行数据处理时，向来强行嵌套多层for循环，但是由于mimic数据库数据量过大，直观的处理方法的运行速度过过过慢，因此第一次尝试优化代码（。以下总结了几种优化python数据处理运行速度的方法。***DataFrame查找效率最高：.at%timeit outdf.loc[0] = indf.loc[0]100 loops, best of 3: 11.7 ms per loop%timeit outdf.iloc[0] = indf.iloc[0]100 loops, best of 3: 11.4 ms per loop %timeit outdf.ix[0] = indf.ix..." }, { "title": "Windows10操作系统下MIMIC数据库的配置", "url": "/echostuff/posts/Windows%E4%B8%8BMIMIC%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2019-08-11 18:21:29 +0800", "snippet": "MIMIC数据库介绍MIMIC 是一个重症医学数据库，全称是Medical Information Mart for Intensive Care。2003年，在NIH的资助下，来自贝斯以色列女执事医疗中心(Beth Israel Deaconess Medical Center)、麻省理工(MIT)、牛津大学和麻省总医院(MGH)的急诊科医生、重症科医生、计算机科学专家等共同建立的一个数据库。该数据库在建立之初的名字为Multiparameter Intelligent Monitoring in Intensive Care II，简写为MIMIC II。2016年9月，MIMIC ..." }, { "title": "机器学习二分类模型常见评价指标", "url": "/echostuff/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/", "categories": "学习总结, ML", "tags": "机器学习", "date": "2019-07-17 14:37:00 +0800", "snippet": "机器学习中的模型大多为分类模型，通过分析特征来给样本进行分类。评价一个分类器的优劣常有以下指标。***&amp;lt;h3&amp;gt;混淆矩阵&amp;lt;/h3&amp;gt;混淆矩阵是监督学习中的一种可视化工具，主要用于比较分类结果和实例的真实信息。矩阵中的每一行代表实例的预测类别，每一列代表实例的真实类别。接下来的许多指标值的计算都基于混淆矩阵完成。   actual positive actual negative predictive positive TP(Ture Positive)..." }, { "title": "Matlab工具箱：遗传算法", "url": "/echostuff/posts/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/", "categories": "学习总结, ML", "tags": "机器学习", "date": "2019-07-16 09:21:33 +0800", "snippet": "遗传算法（Genetic Algorithm）是计算数学中用于解决最优化的搜索算法，是进化算法的一种。进化算法最初是借鉴了进化生物学中的一些现象而发展起来的，这些现象包括遗传、突变、自然选择以及杂交等。遗传算法通常实现方式为一种计算机模拟。对于一个最优化问题，一定数量的候选解（称为个体）可抽象表示为染色体，使种群向更好的解进化。传统上，解用二进制表示（即0和1的串），但也可以用其他表示方法。进化从完全随机个体的种群开始，之后一代一代发生。在每一代中评价整个种群的适应度，从当前种群中随机地选择多个个体（基于它们的适应度），通过自然选择和突变产生新的生命种群，该种群在算法的下一次迭代中成为当..." }, { "title": "利用Python处理Excel数据", "url": "/echostuff/posts/Pandas%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/", "categories": "学习总结, 基础知识", "tags": "Python", "date": "2019-07-10 14:19:18 +0800", "snippet": "&amp;lt;h3&amp;gt;所需Python库&amp;lt;/h3&amp;gt;import numpy as npimport pandas as pdimport xlrd&amp;lt;h3&amp;gt;读取和保存数据&amp;lt;/h3&amp;gt;df = xlrd.open_workbook(&#39;x.xlsx&#39;)df = pd.read_excel(&#39;x.xlsx&#39;)df.to_excel(out, &#39;Sheet1&#39;)&amp;lt;h3&amp;gt;显示数据&amp;lt;/h3&amp;gt;df.shap..." }, { "title": "IEEEtran confer LaTex模板食用方式", "url": "/echostuff/posts/IEEE-confer%E6%A8%A1%E7%89%88%E4%BD%BF%E7%94%A8/", "categories": "学习总结, 应用技能", "tags": "tips", "date": "2019-07-03 10:47:01 +0800", "snippet": "一篇学术论文主要包括标题、作者、正文、图表、参考文献等部分。许多基于LaTex的模板，比如IEEEtran journal/confer，给论文写作带来了很大便利，使作者省去了排版的烦恼。。本文将从标题，作者，正文，图片，表格，数学公式，参考文献七个部分来叙述IEEEtran confer模板的食用方式。标题此模板的标题有以下几种：\\title{An Acute Kidney Injury...}//文章标题\\begin{abstract}...\\end{abstract}//摘要:abstract//关键字：IEEEkeywords \\section{Methods}//普通大标题\\..." }, { "title": "远程服务器scp命令指北", "url": "/echostuff/posts/%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E7%BA%A6%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2019-07-01 17:51:28 +0800", "snippet": "在使用远程服务器（工作站）时，经常有上传和下载文件的需求。当使用工作站和客户机都是Linux操作系统时，可以使用scp命令在两个PC之间复制文件和目录。 *注意：上传文件/文件夹到服务器以及下载文件/文件夹到本地都是在本地终端进行scp是 secure copy的缩写, scp是Linux系统下基于ssh登陆进行安全的远程文件拷贝命令。ssh登录命令语法：## ssh 用户名@ip地址 [-p 端口号]## 方括号为可省## 下为示例ssh student@121.48.162.134 -p 17909scp命令语法：scp [可选参数] file_source file_target ..." }, { "title": "在多设备/多系统下使用hexo", "url": "/echostuff/posts/%E5%9C%A8%E5%A4%9A%E8%AE%BE%E5%A4%87-%E5%A4%9A%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8hexo/", "categories": "学习总结, 应用技能", "tags": "tips", "date": "2019-01-14 11:24:19 +0800", "snippet": "断断续续使用hexo已经一学期左右，刚开始只在windows下使用，但前两月开始学习使用linux操作系统，因此有了在多系统下使用hexo的需求。查阅资料后完成了搭建，于是将操作方法做一下整理，方便查阅。本篇内容搜集整理于网络。一、搭建hexo1.0 准备 git node.js npm 一个github账号1.1 环境搭建 安装Hexo当Node.js和Git都安装好后就可以正式安装Hexo了，git bash(或终端)执行如下命令： npm install -g hexo 1.2 本地搭建hexo静态博客 新建文件夹，随意命名，如：BLOG 进入文件夹，..." }, { "title": "安装Linux系统失败日志", "url": "/echostuff/posts/%E5%AE%89%E8%A3%85Linux%E7%B3%BB%E7%BB%9F%E5%A4%B1%E8%B4%A5%E6%97%A5%E5%BF%97/", "categories": "踩坑总结, 环境配置", "tags": "tips", "date": "2018-11-04 12:39:06 +0800", "snippet": "在一个风和日丽，秋风习习，寒气逼人的周末，萌生已久的装双系统的想法跃出海面。于是，在还有一个周要期中考试，而且summary还没有完全做好的情况下，我愉快的开始搞机。于是，好(e)戏(meng)开始了。Lenovo xiaoxin Air13IKB pro首先尝试ubuntu 在官网下载18.04LST的镜像源 磁盘分出50G做准备 用rufus制作启动盘 进入BIOS更改相关设置(关闭boot securty和fast boot)事情到这里，一切顺利。再次进入BIOS-&amp;gt;BIOS MENU-&amp;gt;USB HHD。终于到了激动人心的安装时刻，选择简体中文，..." }, { "title": "学生成绩管理系统（C++实现）", "url": "/echostuff/posts/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/", "categories": "学习总结, 基础知识", "tags": "C++", "date": "2018-10-23 19:55:27 +0800", "snippet": "从文件读入一个班学生三门课（语文、数学、外语）的成绩，分别统计下列内容，要求每一个功能都用函数实现：（1）统计平均分不及格人数并打印不及格学生名单；（2）统计成绩在全班平均分及平均分之上的学生人数并打印其学生名单；（3）统计平均分的各分数段的学生人数及所占的百分比；（4）按总分成绩由高到低排出成绩的名次；（5）打印出名次表，表格内包括学生编号、各科分数、总分和平均分；（6）任意输入一个学号，能够查找出该学生在班级中的排名及其考试分数类的构建class Students{public: char name[10]; char ID[13]; float Chinese; float Mat..." }, { "title": "二叉树的性质", "url": "/echostuff/posts/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8/", "categories": "学习总结, 基础知识", "tags": "数据结构", "date": "2018-10-21 17:06:28 +0800", "snippet": "**一些相关概念*** 结点拥有的子树数称为结点的**度**，度为0的结点称为**叶子结点或终端结点**，度不为0的结点称为**非终端结点或分支结点**。* 树的度是树内各结点度的最大值* 结点的层次从根开始定义，根为第一层，根的孩子为第二层。 * 树中结点的最大层次称为树的深度或高度 **特殊二叉树** * **斜树** 所有的结点都只有左子树的二叉树叫左斜树，所有结点都只有右子树的二叉树叫右斜树。* **满二叉树** 所有分支结点都存在左子树的右子树，并且所有叶子都在同一层。也就是说，叶子只能出现在最下一层。 同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。* **完..." }, { "title": "哈希表的查找", "url": "/echostuff/posts/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/", "categories": "学习总结, 基础知识", "tags": "数据结构", "date": "2018-10-16 19:53:26 +0800", "snippet": "散列技术：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使得每个关键字key对应一个存储位置f(key)。查找时，根据这个确定的对应关系找到定值key的映射f(key)。 我们把这种对应关系f称为散列函数，又称为哈希(Hash)函数。 采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间成为散列表或哈希表(Hash table)。 散列技术最适合的求解问题是查找与给定值相等的记录。散列技术不适用的情况： 同样的关键字对应很多记录 范围查找两个关键字对应同一记录的现象称为冲突，并把这两个关键字称为同义词。**构造散列函数的方法** **直接定址法** ..." }, { "title": "霍夫曼树的应用", "url": "/echostuff/posts/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E5%BA%94%E7%94%A8/", "categories": "学习总结, 基础知识", "tags": "数据结构", "date": "2018-10-15 20:08:39 +0800", "snippet": "从树中一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数目就成为路径长度。 树的路径长度就是从树根到每一结点的路径长度之和。带权路径长度WPL最小的二叉树称作霍夫曼树" }, { "title": "C++的文件操作", "url": "/echostuff/posts/c%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/", "categories": "学习总结, 基础知识", "tags": "C++", "date": "2018-10-14 15:50:49 +0800", "snippet": "C++的文件操作通过文件流实现 ofstream是输出(写)流文件 ifstream是输入（读）流文件 fstream是可以同时进行输入与输出的流文件**1.打开文件open**void open(const char * filename,openmode mode);filename是待打开的文件的名称。mode是打开模式： ios::in 为输入（读）而打开文件 ios::out 为输出（写）而打开文件 ios::ate 初始位置为文件尾 ios::app 所有输出附加在文件末尾 ios::trunc 如果文件已经存在，就删除该文件 ios::binary 二进..." }, { "title": "平衡二叉树(AVL)", "url": "/echostuff/posts/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/", "categories": "学习总结, 基础知识", "tags": "数据结构", "date": "2018-10-13 23:17:16 +0800", "snippet": "平衡二叉树是二叉排序树的一种，其中每一个结点的左子树和右子树的高度差至多为1。平衡因子(BF)：二叉树上结点的左子树深度减去右子树深度的值。**平衡二叉树的结构定义**typedef struct BiTNode{ int data; int bf; //平衡因子 struct BiTNode *lchild, *rchild;}BiTNode,*BiTree;**平衡二叉树的旋转操作****二叉树的右旋示意图**&amp;lt;/center&amp;gt; **二叉树的左右双旋转示意图**&amp;lt;/center&amp;gt; **右旋**```cvoid R_..." }, { "title": "二叉排序树(BST)", "url": "/echostuff/posts/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/", "categories": "学习总结, 基础知识", "tags": "数据结构", "date": "2018-10-12 16:16:14 +0800", "snippet": "二叉排序树（Binary Sort Tree），又称为二叉查找树（Binary Search Tree），当不为空树时，具有以下性质： 若左子树不空，则左子树上所有结点均小于它的根结点的值； 若右子树不空，则右子树上所有结点均大于它的根结点的值； 它的左右子树也分别为二叉排序树。构造二叉排序树的目的，主要是为了提高查找和插入、删除关键字的速度。**二叉排序树的结构定义**typedef struct BiTNode{ int data; struct BiTNode *lchild, *rchild; }BiTNode,*BiTree;**二叉排序树查找功能的实现**int Se..." }, { "title": "判断两个单链表是否相交以及寻找交点的位置", "url": "/echostuff/posts/%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E4%BA%A4%E5%8F%89%E7%82%B9/", "categories": "学习总结, 基础知识", "tags": "数据结构", "date": "2018-10-11 20:49:15 +0800", "snippet": "单链表结构定义：typedef struct Node{ Elemtype data; struct Node *next; }Node; 判断是否两个单链表相交&amp;lt;/strong&amp;gt;&amp;lt;1&amp;gt; 利用尾结点是否相同判断此处讨论的为相交后即不再分开的两个单链表的情况。因为，两个单链表相交后其尾结点必然相同。方法：遍历两个单链表，比较尾结点是否相同，若相同，则相交。代码实现：int JudgeCross_1(Node *la, Node *lb){ Node *p1 = la; Node *p2 = lb; while (p1 !=..." } ]
